{"version":3,"sources":["api/request.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","method","console","log","fetch","response","ok","Promise","reject","status","statusText","json","getPostDetails","postId","Loader","className","PostsList","currentUserId","selectedPostId","setSelectedPostId","useState","postsList","setPostsList","showLoaderPostsList","setShowLoaderPostsList","loadPostList","userId","posts","useEffect","classNames","length","map","post","id","title","body","type","onClick","postsListHandle","createComment","newComment","data","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","loadData","initialNewComment","name","email","setNewComment","inputChangeHandler","event","target","value","onSubmit","preventDefault","then","placeholder","onChange","initialPostDetails","createdAt","updatedAt","PostDetails","React","memo","postComments","setPostComments","postDetails","setPostDetails","showComments","setShowComments","showLoaderPostsDetails","setShowLoaderPostsDetails","counterComments","all","comments","newPostDetails","comment","formMethod","currentPostId","getUsers","App","users","setUsers","showLoaderUsers","setShowLoaderUsers","setCurrentUserId","loadUsersFromServer","usersFromServer","defaultValue","e","disabled","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef63ca7d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\n// type OptionsRequest = {\n//   method: string;\n//   headers: { 'Content-type': string; };\n//   body: string;\n// };\n\n// const initialOptionsRequest = {\n//   method: 'GET',\n//   headers: { 'Content-type': '' },\n//   body: '',\n// };\n\nexport const request = async (\n  url: string,\n  options: any = {\n    method: 'GET',\n  },\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}${url}`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  // if (!response.headers.get('content-type')?.includes('application/json')) {\n  //   // eslint-disable-next-line prefer-promise-reject-errors\n  //   return Promise.reject('Content-type is not supported');\n  // }\n\n  return response.json();\n};\n","import { request } from './request';\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  currentUserId: string;\n  setSelectedPostId: (postId: string) => void;\n  selectedPostId: string;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUserId,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  const [postsList, setPostsList] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n\n  const loadPostList = async () => {\n    setShowLoaderPostsList(true);\n\n    try {\n      const posts = await getUserPosts(currentUserId);\n\n      setPostsList(posts);\n      setShowLoaderPostsList(false);\n    } catch (error) {\n      setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('mounted', currentUserId);\n    setSelectedPostId('');\n\n    loadPostList();\n\n    // eslint-disable-next-line no-console\n    console.log('postsList = ', postsList);\n  },\n  [currentUserId]);\n\n  const postsListHandle = (postId: string) => {\n    // eslint-disable-next-line no-console\n    console.log('postId =', postId);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId before = ', selectedPostId);\n\n    switch (true) {\n      case selectedPostId && postId === selectedPostId:\n        setSelectedPostId('');\n        // setShowPostDetails(false);\n        // eslint-disable-next-line no-console\n        console.log('postId === selectedPostId', postId, selectedPostId);\n        break;\n\n      case selectedPostId && postId !== selectedPostId:\n        setSelectedPostId(postId);\n        // setShowPostDetails(true);\n        // eslint-disable-next-line no-console\n        console.log('postId !== selectedPostId', postId, selectedPostId);\n        break;\n\n      default:\n        setSelectedPostId(postId);\n        // eslint-disable-next-line no-console\n        console.log('selectedPostId undefined =', postId, selectedPostId);\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId after =', selectedPostId);\n  };\n\n  return (\n    <div className={classNames('PostsList',\n      { 'PostsList--empty': !currentUserId })}\n    >\n      <h2>Posts:</h2>\n      {showLoaderPostsList ? (\n        <Loader />\n      ) : (\n        <>\n          <p>{`Count posts: ${postsList.length}`}</p>\n\n          <ul className=\"PostsList__list\">\n            {postsList.map((post: Post) => (\n              <li\n                key={post.id}\n                className={classNames('PostsList__item',\n                  { 'PostsList__item--active': (post.id === selectedPostId) })}\n                data-cy=\"postDetails\"\n              >\n                <div>\n                  {/* <b>{`[User #${post.userId}]: `}</b> */}\n                  <strong>{post.title}</strong>\n                  :\n                  <br />\n                  {`${post.body}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postsListHandle(post.id)}\n                >\n                  {(selectedPostId === post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  request,\n  // BASE_URL,\n} from './request';\n\nexport const getPostComments = (postId: string) => request(\n  `/comments?postId=${postId}`,\n);\n\nconst post = (url: string, data: NewComment) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n\n// const patch = (url: string, data: NewComment) => {\n//   return request(url, {\n//     method: 'PATCH',\n//     headers: {\n//       'Content-type': 'application/json; charset=utf-8',\n//     },\n//     body: JSON.stringify(data),\n//   });\n// };\n\n// const updateComment = (commentId: string, newComment: NewComment) => {\n//   return patch(`//`)\n// };\n\nexport const createComment = (newComment : NewComment) => {\n  return post('/comments', newComment);\n};\n\nconst remove = (url: string) => {\n  return request(url, {\n    method: 'DELETE',\n  });\n};\n\nexport const deleteComment = (commentId: string) => {\n  // eslint-disable-next-line no-console\n  console.log('commentId = ', commentId);\n\n  return remove(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: string;\n  loadData: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  loadData,\n}) => {\n  const initialNewComment = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialNewComment);\n\n  useEffect(() => {\n    setNewComment(initialNewComment);\n  },\n  [selectedPostId]);\n\n  const inputChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const newCommentFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    createComment(newComment).then(() => loadData());\n    setNewComment(initialNewComment);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={newCommentFormSubmit}\n    >\n      {`postId: ${selectedPostId}`}\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newComment.body}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: string,\n  setSelectedPostId: (postId: string) => void;\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst initialPostDetails = {\n  id: '',\n  userId: '',\n  title: '',\n  body: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  // eslint-disable-next-line no-console\n  console.log('render PostDetails');\n\n  const [postComments, setPostComments] = useState([]);\n  const [postDetails, setPostDetails] = useState(initialPostDetails);\n  const [showComments, setShowComments] = useState(true);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const counterComments = postComments.length;\n\n  const loadData = async () => {\n    setShowLoaderPostsDetails(true);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId =', selectedPostId);\n\n    try {\n      const [comments, newPostDetails] = await Promise.all([\n        getPostComments(selectedPostId),\n        getPostDetails(selectedPostId),\n      ]);\n\n      setPostComments(comments);\n      setPostDetails(newPostDetails);\n      setShowLoaderPostsDetails(false);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n\n      setShowLoaderPostsDetails(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPostId) {\n      // eslint-disable-next-line no-console\n      console.log('mounted new comment by postId = ', selectedPostId);\n\n      loadData();\n    }\n  },\n  [\n    selectedPostId,\n  ]);\n\n  const onDeleteButton = (commentId: string) => {\n    deleteComment(commentId).then((response) => {\n      // eslint-disable-next-line no-console\n      console.log(response, 'loadData');\n\n      const currentPostId = selectedPostId;\n\n      setSelectedPostId('');\n      setSelectedPostId(currentPostId);\n    });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {showLoaderPostsDetails ? (\n        <Loader />\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <strong>{`${postDetails.title}`}</strong>\n            <p>{postDetails.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__button button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              { showComments\n                ? `Hide ${counterComments} comments`\n                : 'Show comments' }\n            </button>\n\n            { showComments && (\n              <ul\n                className=\"PostDetails__list\"\n                data-cy=\"postList\"\n              >\n                {postComments.map((comment: Comment) => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      formMethod=\"DELETE\"\n                      onClick={() => onDeleteButton(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>\n                      <strong>{`${comment.name}:`}</strong>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        </>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            loadData={loadData}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { request } from './request';\n\nexport const getUsers = (userId = '') => request(`/users${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\n\ntype User = {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  phone: string;\n  website: string;\n  createdAt: string;\n  updatedAt: string;\n  address: {\n    id: string;\n    userId: string;\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    createdAt: string;\n    updatedAt: string;\n  }\n};\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState([]);\n  const [showLoaderUsers, setShowLoaderUsers] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  // const [showPostDetails, setShowPostDetails] = useState(false);\n\n  const loadUsersFromServer = async () => {\n    setShowLoaderUsers(true);\n\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderUsers(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsersFromServer();\n  },\n  []);\n\n  const selectUserHandler = (userId: string) => {\n    setCurrentUserId(userId);\n    // setShowPostDetails(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {showLoaderUsers ? (\n        <Loader />\n      ) : (\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              defaultValue=\"DEFAULT\"\n              onChange={e => selectUserHandler(e.target.value)}\n            >\n              <option value=\"DEFAULT\" disabled>Choose...</option>\n              <option value=\"All\">All users</option>\n              {users.map((user : User) => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </header>\n      )}\n\n      <main className=\"App__main\">\n        {currentUserId && (\n          <div className=\"App__sidebar\">\n            <PostsList\n              currentUserId={currentUserId}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n              // setShowPostDetails={setShowPostDetails}\n            />\n          </div>\n        )}\n\n        <div\n          className={classNames(\n            'App__content',\n            { 'App__content--empty': !selectedPostId },\n          )}\n        >\n          { selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          )}\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}