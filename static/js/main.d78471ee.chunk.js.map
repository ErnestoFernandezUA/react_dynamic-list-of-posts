{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","api/comments.ts","index.tsx"],"names":["PostsList","postsList","selectedPostId","downLoadComments","downloadPostDetails","className","length","map","post","classNames","id","userId","title","type","onClick","postId","Loader","NewCommentForm","action","method","name","placeholder","PostDetails","postComments","postDetails","useState","showComments","setShowComments","counterComments","showLoaderForTitlePost","showLoaderForComments","comment","formMethod","body","BASE_URL","request","url","a","console","log","fetch","response","ok","Promise","reject","status","statusText","headers","get","includes","json","getUserPosts","getPostDetails","initialPostDetails","createdAt","updatedAt","App","setPostsList","currentUser","setCurrentUser","setSelectedPostId","setPostDetails","setPostComments","showLoaderPostsList","setShowLoaderPostsList","showLoaderPostsDetails","setShowLoaderPostsDetails","downloadPosts","posts","newPostDetails","comments","defaultValue","onChange","e","target","value","disabled","style","visibility","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d78471ee.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  postsList: Post[];\n  selectedPostId: string;\n  downLoadComments: (id: string) => void;\n  downloadPostDetails: (postId: string) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsList,\n  selectedPostId,\n  downLoadComments,\n  downloadPostDetails,\n}) => {\n  const postsListHandle = (postId: string) => {\n    downLoadComments(postId);\n    downloadPostDetails(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <p>{`Count posts: ${postsList.length}`}</p>\n\n      <ul className=\"PostsList__list\">\n        {postsList.map((post: Post) => (\n          <li\n            key={post.id}\n            className={classNames('PostsList__item',\n              { 'PostsList__item--active': (post.id === selectedPostId) })}\n            data-cy=\"postDetails\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.id}\n              :\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => postsListHandle(post.id)}\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  post: Post;\n};\n\nexport const NewCommentForm: React.FC<Props> = () => (\n  <form\n    className=\"NewCommentForm\"\n    action=\"\"\n    method=\"\"\n  >\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      className=\"NewCommentForm__submit-button button\"\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postComments: Comment[];\n  postDetails: Post;\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  postDetails,\n}) => {\n  const [showComments, setShowComments] = useState(true);\n\n  const counterComments = postComments.length;\n  const showLoaderForTitlePost = !postDetails.title;\n  const showLoaderForComments = !postComments;\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        { showLoaderForTitlePost\n          && <Loader /> }\n\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        { showLoaderForComments\n          && <Loader /> }\n\n        <button\n          type=\"button\"\n          className=\"PostDetails__button button\"\n          onClick={() => setShowComments(!showComments)}\n        >\n          { showComments\n            ? `Hide ${counterComments} comments`\n            : 'Show comments' }\n        </button>\n\n        { showComments && (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postList\"\n          >\n            {postComments.map((comment: Comment) => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  formMethod=\"DELETE\"\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            post={postDetails}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","/* eslint-disable no-cond-assign */\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  // eslint-disable-next-line no-console\n  console.log(`${BASE_URL}${url}`);\n\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content-type is not supported');\n  }\n\n  return response.json();\n};\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n\n// export async function getUserPosts(userId: string): Promise<never[]> {\n//   const addUrl = '/posts?userId=';\n//   const addUrlForAllUsers = '/posts';\n\n//   const endPoint = `${BASE_URL}${\n//     (userId === '0')\n//       ? addUrlForAllUsers\n//       : addUrl + userId\n//   }`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('userId:', userId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n\n// export async function getPostDetails(postId: string): Promise<Post> {\n//   const addUrl = '/posts/';\n//   const endPoint = `${BASE_URL}${addUrl}${postId}`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('postId:', postId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getPostDetails } from './api/posts';\nimport { getPostComments } from './api/comments';\nimport { Loader } from './components/Loader';\n\nconst initialPostDetails = {\n  id: '',\n  userId: '',\n  title: '',\n  body: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nconst App: React.FC = () => {\n  const [postsList, setPostsList] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [postDetails, setPostDetails] = useState(initialPostDetails);\n  const [postComments, setPostComments] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const downloadPosts = async (userId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(userId);\n\n    setShowLoaderPostsList(true);\n\n    try {\n      if (currentUser !== userId) {\n        const posts = await getUserPosts(userId);\n\n        setSelectedPostId('');\n        setPostDetails({\n          id: '',\n          userId: '',\n          title: '',\n          body: '',\n          createdAt: '',\n          updatedAt: '',\n        });\n        setCurrentUser(userId);\n        setPostsList(posts);\n        setShowLoaderPostsList(false);\n      }\n    } catch (error) {\n      setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  const downloadPostDetails = async (postId: string) => {\n    setShowLoaderPostsDetails(true);\n\n    try {\n      // eslint-disable-next-line no-console\n      console.log(postId);\n\n      const newPostDetails = await getPostDetails(postId);\n\n      setPostDetails(newPostDetails);\n      setShowLoaderPostsDetails(false);\n    } catch (error) {\n      setShowLoaderPostsDetails(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  const downLoadComments = async (id: string) => {\n    if (selectedPostId === id) {\n      setSelectedPostId('');\n    } else {\n      const comments = await getPostComments(id);\n\n      setSelectedPostId(id);\n      setPostComments(comments);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"DEFAULT\"\n            onChange={e => downloadPosts(e.target.value)}\n          >\n            <option value=\"DEFAULT\" disabled>\n              Choose...\n            </option>\n            <option value=\"All\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        {currentUser && (\n          <div className=\"App__sidebar\">\n            {showLoaderPostsList ? (\n              <Loader />\n            ) : (\n              <PostsList\n                postsList={postsList}\n                selectedPostId={selectedPostId}\n                downloadPostDetails={downloadPostDetails}\n                downLoadComments={downLoadComments}\n              />\n            )}\n          </div>\n        )}\n\n        {postDetails.id && (\n          <div\n            className=\"App__content\"\n            style={{\n              visibility: `${!selectedPostId ? 'hidden' : 'visible'}`,\n            }}\n          >\n            {showLoaderPostsDetails ? (\n              <div>\n                <Loader />\n              </div>\n            ) : (\n              <PostDetails\n                postComments={postComments}\n                postDetails={postDetails}\n              />\n            )}\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './posts';\n\nexport const getPostComments = (postId: string) => request(\n  `/comments?postId=${postId}`,\n);\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}