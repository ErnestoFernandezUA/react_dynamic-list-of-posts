{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","postsList","selectedPostId","downLoadComments","downloadPostDetails","className","length","map","post","classNames","id","userId","title","body","type","onClick","postId","Loader","BASE_URL","request","url","a","console","log","fetch","response","ok","Promise","reject","status","statusText","headers","get","includes","json","getUserPosts","getPostDetails","createComment","newComment","method","JSON","stringify","then","NewCommentForm","initialNewComment","name","email","useState","setNewComment","inputChangeHandler","event","target","value","onSubmit","preventDefault","placeholder","onChange","PostDetails","postComments","postDetails","showComments","setShowComments","counterComments","showLoaderForTitlePost","showLoaderForComments","comment","formMethod","initialPostDetails","createdAt","updatedAt","App","setPostsList","currentUser","setCurrentUser","setSelectedPostId","setPostDetails","setPostComments","showLoaderPostsList","setShowLoaderPostsList","showLoaderPostsDetails","setShowLoaderPostsDetails","downloadPosts","posts","newPostDetails","comments","defaultValue","e","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e3923ba.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  postsList: Post[];\n  selectedPostId: string;\n  downLoadComments: (id: string) => void;\n  downloadPostDetails: (postId: string) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsList,\n  selectedPostId,\n  downLoadComments,\n  downloadPostDetails,\n}) => {\n  const postsListHandle = (postId: string) => {\n    downLoadComments(postId);\n    downloadPostDetails(postId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <p>{`Count posts: ${postsList.length}`}</p>\n\n      <ul className=\"PostsList__list\">\n        {postsList.map((post: Post) => (\n          <li\n            key={post.id}\n            className={classNames('PostsList__item',\n              { 'PostsList__item--active': (post.id === selectedPostId) })}\n            data-cy=\"postDetails\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              <strong>{post.title}</strong>\n              :\n              <br />\n              {post.body}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => postsListHandle(post.id)}\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-cond-assign */\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  // eslint-disable-next-line no-console\n  console.log(`${BASE_URL}${url}`);\n\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content-type is not supported');\n  }\n\n  return response.json();\n};\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n\n// export async function getUserPosts(userId: string): Promise<never[]> {\n//   const addUrl = '/posts?userId=';\n//   const addUrlForAllUsers = '/posts';\n\n//   const endPoint = `${BASE_URL}${\n//     (userId === '0')\n//       ? addUrlForAllUsers\n//       : addUrl + userId\n//   }`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('userId:', userId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n\n// export async function getPostDetails(postId: string): Promise<Post> {\n//   const addUrl = '/posts/';\n//   const endPoint = `${BASE_URL}${addUrl}${postId}`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('postId:', postId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n","import { request, BASE_URL } from './posts';\n\nexport const getPostComments = (postId: string) => request(\n  `/comments?postId=${postId}`,\n);\n\nexport const createComment = async (newComment : NewComment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: string;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const initialNewComment = {\n    postId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialNewComment);\n\n  const inputChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const newCommentFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    createComment(newComment);\n    setNewComment(initialNewComment);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={newCommentFormSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newComment.body}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postComments: Comment[];\n  postDetails: Post;\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  postDetails,\n}) => {\n  const [showComments, setShowComments] = useState(true);\n\n  const counterComments = postComments.length;\n  const showLoaderForTitlePost = !postDetails.title;\n  const showLoaderForComments = !postComments;\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        { showLoaderForTitlePost\n          && <Loader /> }\n\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        { showLoaderForComments\n          && <Loader /> }\n\n        <button\n          type=\"button\"\n          className=\"PostDetails__button button\"\n          onClick={() => setShowComments(!showComments)}\n        >\n          { showComments\n            ? `Hide ${counterComments} comments`\n            : 'Show comments' }\n        </button>\n\n        { showComments && (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postList\"\n          >\n            {postComments.map((comment: Comment) => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  formMethod=\"DELETE\"\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postDetails.id}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getPostDetails } from './api/posts';\nimport { getPostComments } from './api/comments';\nimport { Loader } from './components/Loader';\n\nconst initialPostDetails = {\n  id: '',\n  userId: '',\n  title: '',\n  body: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nconst App: React.FC = () => {\n  const [postsList, setPostsList] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [postDetails, setPostDetails] = useState(initialPostDetails);\n  const [postComments, setPostComments] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const downloadPosts = async (userId: string) => {\n    setShowLoaderPostsList(true);\n\n    try {\n      if (currentUser !== userId) {\n        const posts = await getUserPosts(userId);\n\n        setSelectedPostId('');\n        setPostDetails(initialPostDetails);\n        setCurrentUser(userId);\n        setPostsList(posts);\n        setShowLoaderPostsList(false);\n      }\n    } catch (error) {\n      setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  const downloadPostDetails = async (postId: string) => {\n    setShowLoaderPostsDetails(true);\n\n    try {\n      // eslint-disable-next-line no-console\n      console.log(postId);\n\n      const newPostDetails = await getPostDetails(postId);\n\n      setPostDetails(newPostDetails);\n      setShowLoaderPostsDetails(false);\n    } catch (error) {\n      setShowLoaderPostsDetails(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  const downLoadComments = async (id: string) => {\n    if (selectedPostId === id) {\n      setSelectedPostId('');\n    } else {\n      const comments = await getPostComments(id);\n\n      setSelectedPostId(id);\n      setPostComments(comments);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"DEFAULT\"\n            onChange={e => downloadPosts(e.target.value)}\n          >\n            <option value=\"DEFAULT\" disabled>Choose...</option>\n            <option value=\"All\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        {currentUser && (\n          <div className=\"App__sidebar\">\n            {showLoaderPostsList ? (\n              <Loader />\n            ) : (\n              <PostsList\n                postsList={postsList}\n                selectedPostId={selectedPostId}\n                downloadPostDetails={downloadPostDetails}\n                downLoadComments={downLoadComments}\n              />\n            )}\n          </div>\n        )}\n\n        <div\n          className={classNames(\n            'App__content',\n            { 'App__content--hidden': !selectedPostId },\n          )}\n        >\n          {showLoaderPostsDetails ? (\n            <div>\n              <Loader />\n            </div>\n          ) : (\n            <PostDetails\n              postComments={postComments}\n              postDetails={postDetails}\n            />\n          )}\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}