{"version":3,"sources":["api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","console","log","fetch","response","ok","Promise","reject","status","statusText","headers","get","includes","json","getPostDetails","postId","Loader","className","PostsList","currentUser","selectedPostId","setSelectedPostId","setShowPostDetails","useState","postsList","setPostsList","showLoaderPostsList","setShowLoaderPostsList","loadData","userId","posts","useEffect","length","map","post","classNames","id","title","body","type","onClick","postsListHandle","createComment","newComment","data","method","JSON","stringify","NewCommentForm","initialNewComment","name","email","setNewComment","inputChangeHandler","event","target","value","onSubmit","preventDefault","then","placeholder","onChange","initialPostDetails","createdAt","updatedAt","PostDetails","postComments","setPostComments","postDetails","setPostDetails","showComments","setShowComments","showLoaderPostsDetails","setShowLoaderPostsDetails","counterComments","all","comments","newPostDetails","comment","formMethod","App","setCurrentUser","showPostDetails","defaultValue","e","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2ddca2f.chunk.js","sourcesContent":["/* eslint-disable no-cond-assign */\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options: any = {}) => {\n  // eslint-disable-next-line no-console\n  console.log(`${BASE_URL}${url}`, options);\n\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content-type is not supported');\n  }\n\n  return response.json();\n};\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n\n// export async function getUserPosts(userId: string): Promise<never[]> {\n//   const addUrl = '/posts?userId=';\n//   const addUrlForAllUsers = '/posts';\n\n//   const endPoint = `${BASE_URL}${\n//     (userId === '0')\n//       ? addUrlForAllUsers\n//       : addUrl + userId\n//   }`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('userId:', userId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n\n// export async function getPostDetails(postId: string): Promise<Post> {\n//   const addUrl = '/posts/';\n//   const endPoint = `${BASE_URL}${addUrl}${postId}`;\n\n//   // eslint-disable-next-line no-console\n//   console.log('postId:', postId, 'endPoint:', endPoint);\n\n//   const response = await fetch(endPoint);\n\n//   if (!response.ok) {\n//     throw new Error('error');\n//   }\n\n//   if (!response.headers.get('content-type')?.includes('application/json')) {\n//     // eslint-disable-next-line prefer-promise-reject-errors\n//     return Promise.reject('Content type is not supported');\n//   }\n\n//   return response.json();\n// }\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  currentUser: string;\n  setSelectedPostId: (postId: string) => void;\n  selectedPostId: string;\n  // showPostDetails: boolean;\n  setShowPostDetails: (value: boolean) => void;\n  // downLoadComments: (id: string) => void;\n  // downloadPostDetails: (postId: string) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUser,\n  selectedPostId,\n  setSelectedPostId,\n  // showPostDetails,\n  setShowPostDetails,\n  // downLoadComments,\n  // downloadPostDetails,\n}) => {\n  const [postsList, setPostsList] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n\n  const loadData = async () => {\n    setShowLoaderPostsList(true);\n\n    try {\n      const posts = await getUserPosts(currentUser);\n\n      setPostsList(posts);\n      setShowLoaderPostsList(false);\n    } catch (error) {\n      setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('mounted', currentUser);\n\n    loadData();\n\n    // eslint-disable-next-line no-console\n    console.log(postsList);\n  },\n  [currentUser]);\n\n  const postsListHandle = (postId: string) => {\n    // eslint-disable-next-line no-console\n    console.log('postId =', postId);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId before = ', selectedPostId);\n\n    // downLoadComments(postId);\n    // downloadPostDetails(postId);\n\n    // if (postId === selectedPostId) {\n    //   setShowPostDetails(!showPostDetails);\n    //   setSelectedPostId('');\n    // } else {\n    //   setShowPostDetails(true);\n    //   setSelectedPostId(postId);\n    // }\n\n    switch (true) {\n      case selectedPostId && postId === selectedPostId:\n        setSelectedPostId('');\n        setShowPostDetails(false);\n        // eslint-disable-next-line no-console\n        console.log(selectedPostId);\n        break;\n\n      case selectedPostId && postId !== selectedPostId:\n        setSelectedPostId(postId);\n        setShowPostDetails(true);\n        // eslint-disable-next-line no-console\n        console.log(selectedPostId);\n        break;\n\n      default:\n        setSelectedPostId(postId);\n        setShowPostDetails(true);\n        // eslint-disable-next-line no-console\n        console.log(selectedPostId);\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId after =', selectedPostId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {showLoaderPostsList ? (\n        <Loader />\n      ) : (\n        <>\n          <p>{`Count posts: ${postsList.length}`}</p>\n\n          <ul className=\"PostsList__list\">\n            {postsList.map((post: Post) => (\n              <li\n                key={post.id}\n                className={classNames('PostsList__item',\n                  { 'PostsList__item--active': (post.id === selectedPostId) })}\n                data-cy=\"postDetails\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  <strong>{post.title}</strong>\n                  :\n                  <br />\n                  {`${post.id} : ${post.body}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postsListHandle(post.id)}\n                >\n                  {(selectedPostId === post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import { request, BASE_URL } from './posts';\n\nexport const getPostComments = (postId: string) => request(\n  `/comments?postId=${postId}`,\n);\n\nconst post = (url: string, data: any) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const createComment = (newComment : NewComment) => {\n  // eslint-disable-next-line no-console\n  console.log(`${BASE_URL}/comments`, 'POST', newComment);\n\n  return post('/comments', newComment);\n};\n\n// export const createComment = (newComment : NewComment) => {\n//   // eslint-disable-next-line no-console\n//   console.log(`${BASE_URL}/comments`, 'POST', newComment);\n\n//   // return fetch(`${BASE_URL}/comments`, {\n//   //   method: 'POST',\n//   //   headers: {\n//   //     'Content-type': 'application/json; charset=UTF-8',\n//   //   },\n//   //   body: JSON.stringify(newComment),\n//   // })\n//   //   .then(response => response.json());\n\n//   return post()\n// };\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: string;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  // eslint-disable-next-line no-console\n  console.log('NewCommentForm', postId);\n\n  const initialNewComment = {\n    // eslint-disable-next-line quote-props\n    'postId': postId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  // eslint-disable-next-line no-console\n  console.log('initialNewComment = ', initialNewComment);\n\n  const [newComment, setNewComment] = useState(initialNewComment);\n\n  const inputChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    // eslint-disable-next-line no-console\n    console.log('newComment handler before', newComment);\n\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value,\n    });\n\n    // eslint-disable-next-line no-console\n    console.log('newComment handler after', newComment);\n  };\n\n  const newCommentFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // eslint-disable-next-line no-console\n    console.log('new comment submit', newComment);\n\n    // eslint-disable-next-line no-console\n    createComment(newComment).then((response) => console.log(response));\n    setNewComment(initialNewComment);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={newCommentFormSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newComment.body}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  // currentUser: string;\n  selectedPostId: string,\n  // postComments: Comment[];\n  // postDetails: Post;\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst initialPostDetails = {\n  id: '',\n  userId: '',\n  title: '',\n  body: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  // currentUser,\n  selectedPostId,\n  // postComments,\n  // postDetails,\n}) => {\n  const [postComments, setPostComments] = useState([]);\n  const [postDetails, setPostDetails] = useState(initialPostDetails);\n  const [showComments, setShowComments] = useState(true);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const counterComments = postComments.length;\n  // const showLoaderForTitlePost = !postDetails.title;\n  // const showLoaderForComments = !postComments;\n\n  const loadData = async () => {\n    setShowLoaderPostsDetails(true);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId =', selectedPostId);\n    // eslint-disable-next-line no-console\n    // console.log('currentUser = ', currentUser);\n\n    try {\n      // const comments = await getPostDetails(selectedPostId);\n      const [comments, newPostDetails] = await Promise.all([\n        getPostComments(selectedPostId),\n        getPostDetails(selectedPostId),\n      ]);\n\n      // const comments = await getPostComments(selectedPostId);\n      // const newPostDetails = await getPostDetails(selectedPostId);\n\n      setPostComments(comments);\n      setPostDetails(newPostDetails);\n      // setShowLoaderPostsList(false);\n      setShowLoaderPostsDetails(false);\n    } catch (error) {\n      // setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n\n      setShowLoaderPostsDetails(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPostId) {\n      // eslint-disable-next-line no-console\n      console.log('mounted new comment by postId = ', selectedPostId);\n\n      loadData();\n    }\n  },\n  [\n    // currentUser,\n    selectedPostId,\n  ]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {showLoaderPostsDetails ? (\n        <Loader />\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{`${selectedPostId} : ${postDetails.title} : ${postDetails.id}`}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__button button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              { showComments\n                ? `Hide ${counterComments} comments`\n                : 'Show comments' }\n            </button>\n\n            { showComments && (\n              <ul\n                className=\"PostDetails__list\"\n                data-cy=\"postList\"\n              >\n                {postComments.map((comment: Comment) => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      formMethod=\"DELETE\"\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        </>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {selectedPostId}\n          <br />\n          {postDetails.id}\n          <NewCommentForm\n            postId={postDetails.id}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n// import {\n// getUserPosts,\n// getPostDetails,\n// } from './api/posts';\n// import { getPostComments } from './api/comments';\n// import { Loader } from './components/Loader';\n\n// const initialPostDetails = {\n//   id: '',\n//   userId: '',\n//   title: '',\n//   body: '',\n//   createdAt: '',\n//   updatedAt: '',\n// };\n\nconst App: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [showPostDetails, setShowPostDetails] = useState(false);\n  // const [postDetails, setPostDetails] = useState(initialPostDetails);\n  // const [postComments, setPostComments] = useState([]);\n  // const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  // const downloadPostDetails = async (postId: string) => {\n  //   setShowLoaderPostsDetails(true);\n\n  //   try {\n  //     // eslint-disable-next-line no-console\n  //     console.log(postId);\n\n  //     const newPostDetails = await getPostDetails(postId);\n\n  //     setPostDetails(newPostDetails);\n  //     setShowLoaderPostsDetails(false);\n  //   } catch (error) {\n  //     setShowLoaderPostsDetails(false);\n  //     // eslint-disable-next-line no-console\n  //     console.log('error', error);\n  //   }\n  // };\n\n  // const downLoadComments = async (id: string) => {\n  //   if (selectedPostId === id) {\n  //     setSelectedPostId('');\n  //   } else {\n  //     const comments = await getPostComments(id);\n\n  //     setSelectedPostId(id);\n  //     setPostComments(comments);\n  //   }\n  // };\n\n  const selectUserHandler = (userId: string) => {\n    setCurrentUser(userId);\n    setShowPostDetails(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"DEFAULT\"\n            onChange={e => selectUserHandler(e.target.value)}\n          >\n            <option value=\"DEFAULT\" disabled>Choose...</option>\n            <option value=\"All\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        {currentUser && (\n          <div className=\"App__sidebar\">\n            <PostsList\n              currentUser={currentUser}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n              // showPostDetails={showPostDetails}\n              setShowPostDetails={setShowPostDetails}\n              // downloadPostDetails={downloadPostDetails}\n              // downLoadComments={downLoadComments}\n            />\n          </div>\n        )}\n\n        <div\n          className={classNames(\n            'App__content',\n            { 'App__content--hidden': !showPostDetails },\n          )}\n        >\n          {showPostDetails && (\n            <PostDetails\n              // currentUser={currentUser}\n              selectedPostId={selectedPostId}\n              // postComments={postComments}\n              // postDetails={postDetails}\n            />\n          )}\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}