{"version":3,"sources":["api/request.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","method","console","log","fetch","response","ok","Promise","reject","status","statusText","json","getPostDetails","postId","Loader","className","PostsList","currentUserId","selectedPostId","setSelectedPostId","useState","postsList","setPostsList","showLoaderPostsList","setShowLoaderPostsList","loadPostList","userId","posts","useEffect","classNames","length","map","post","id","title","body","type","onClick","createComment","newComment","data","JSON","stringify","headers","deleteComment","commentId","NewCommentForm","loadPostDetails","initialNewComment","name","email","setNewComment","inputChangeHandler","event","target","value","onSubmit","preventDefault","then","placeholder","onChange","PostDetails","React","memo","postComments","setPostComments","postDetails","setPostDetails","showComments","setShowComments","showLoaderPostsDetails","setShowLoaderPostsDetails","counterComments","all","commentsFromServer","postDetailsFromServer","comment","formMethod","currentPostId","getUsers","App","users","setUsers","showLoaderUsers","setShowLoaderUsers","setCurrentUserId","loadUsersFromServer","usersFromServer","defaultValue","e","disabled","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccd200b6.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestOptionsType = {\n  method: 'GET' | 'POST' | 'DELETE';\n  headers?: { 'Content-type': 'application/json; charset=utf-8' };\n  body?: string;\n};\n\nexport const request = async (\n  url: string,\n  options: RequestOptionsType = {\n    method: 'GET',\n  },\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}${url}`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n};\n","import { request } from './request';\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string | null) => request(`/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  currentUserId: string;\n  setSelectedPostId: (postId: string | null) => void;\n  selectedPostId: string | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUserId,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  const [postsList, setPostsList] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n\n  const loadPostList = async () => {\n    setShowLoaderPostsList(true);\n\n    try {\n      const posts = await getUserPosts(currentUserId);\n\n      setPostsList(posts);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderPostsList(false);\n    }\n  };\n\n  useEffect(() => {\n    setSelectedPostId(null);\n\n    loadPostList();\n  },\n  [currentUserId]);\n\n  const postsListHandle = (postId: string) => {\n    if (selectedPostId && postId === selectedPostId) {\n      setSelectedPostId(null);\n    } else if (selectedPostId && postId !== selectedPostId) {\n      setSelectedPostId(postId);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className={classNames('PostsList',\n      { 'PostsList--empty': !currentUserId })}\n    >\n      <h2>Posts:</h2>\n      {showLoaderPostsList ? (\n        <Loader />\n      ) : (\n        <>\n          <p>{`Count posts: ${postsList.length}`}</p>\n\n          <ul className=\"PostsList__list\">\n            {postsList.map((post: PostType) => (\n              <li\n                key={post.id}\n                className={classNames('PostsList__item',\n                  { 'PostsList__item--active': (post.id === selectedPostId) })}\n                data-cy=\"postDetails\"\n              >\n                <div>\n                  <strong>{post.title}</strong>\n                  :\n                  <br />\n                  {`${post.body}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postsListHandle(post.id)}\n                >\n                  {(selectedPostId === post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  request,\n} from './request';\n\nexport const getPostComments = (postId: string | null) => request(\n  `/comments?postId=${postId}`,\n);\n\nconst post = (url: string, data: NewCommentType) => {\n  // eslint-disable-next-line no-console\n  console.log('POST data', JSON.stringify(data));\n\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const createComment = (newComment : NewCommentType) => {\n  return post('/comments', newComment);\n};\n\nconst remove = (url: string) => {\n  return request(url, {\n    method: 'DELETE',\n  });\n};\n\nexport const deleteComment = (commentId: string) => {\n  // eslint-disable-next-line no-console\n  console.log('delete commentId = ', commentId);\n\n  return remove(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: string | null;\n  loadPostDetails: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  loadPostDetails,\n}) => {\n  const initialNewComment: NewCommentType = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [\n    newComment,\n    setNewComment,\n  ] = useState<NewCommentType>(initialNewComment);\n\n  useEffect(() => {\n    setNewComment(initialNewComment);\n  },\n  [selectedPostId]);\n\n  const inputChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const newCommentFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if ((newComment.name.length > 0)\n    && (newComment.email.length > 0)\n    && (newComment.body.length > 0)) {\n      createComment(newComment).then(() => loadPostDetails());\n      setNewComment(initialNewComment);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={newCommentFormSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newComment.body}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: string | null;\n  setSelectedPostId: (postId: string | null) => void;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  // eslint-disable-next-line no-console\n  console.log('render PostDetails');\n\n  const [postComments, setPostComments] = useState([]);\n  const [postDetails, setPostDetails] = useState<PostDetailsType | null>(null);\n  const [showComments, setShowComments] = useState(true);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const counterComments = postComments.length;\n\n  const loadPostDetails = async () => {\n    setShowLoaderPostsDetails(true);\n\n    try {\n      const [commentsFromServer, postDetailsFromServer] = await Promise.all([\n        getPostComments(selectedPostId),\n        getPostDetails(selectedPostId),\n      ]);\n\n      setPostComments(commentsFromServer);\n      setPostDetails(postDetailsFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderPostsDetails(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPostId) {\n      loadPostDetails();\n    }\n  },\n  [\n    selectedPostId,\n  ]);\n\n  const onDeleteButton = (commentId: string) => {\n    deleteComment(commentId).then(() => {\n      const currentPostId = selectedPostId;\n\n      setSelectedPostId(null);\n      setSelectedPostId(currentPostId);\n    });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails && (\n        <section className=\"PostDetails__post\">\n          <strong>{`${postDetails.title}`}</strong>\n          <p>{postDetails.body}</p>\n        </section>\n      )}\n\n      {showLoaderPostsDetails ? (\n        <Loader />\n      ) : (\n        <section className=\"PostDetails__comments\">\n          {(counterComments > 0) && (\n            <button\n              type=\"button\"\n              className=\"PostDetails__button button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              { showComments\n                ? `Hide ${counterComments} comments`\n                : 'Show comments' }\n            </button>\n          )}\n\n          { showComments && (\n            <ul\n              className=\"PostDetails__list\"\n              data-cy=\"postList\"\n            >\n              {postComments.map((comment: CommentType) => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    formMethod=\"DELETE\"\n                    onClick={() => onDeleteButton(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>\n                    <strong>{comment.name ? `${comment.name}: ` : 'noname: '}</strong>\n                    {comment.body}\n                  </p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            loadPostDetails={loadPostDetails}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { request } from './request';\n\nexport const getUsers = (userId = '') => request(`/users${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState([]);\n  const [showLoaderUsers, setShowLoaderUsers] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState('All');\n  const [selectedPostId, setSelectedPostId] = useState<string | null>(null);\n\n  const loadUsersFromServer = async () => {\n    setShowLoaderUsers(true);\n\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderUsers(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsersFromServer();\n  },\n  []);\n\n  const selectUserHandler = (userId: string) => {\n    setCurrentUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      {showLoaderUsers ? (\n        <Loader />\n      ) : (\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              defaultValue=\"All\"\n              onChange={e => selectUserHandler(e.target.value)}\n            >\n              <option value=\"DEFAULT\" disabled>Choose...</option>\n              <option value=\"All\">All users</option>\n              {users.map((user : UserType) => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </header>\n      )}\n\n      <main className=\"App__main\">\n        {currentUserId && (\n          <div className=\"App__sidebar\">\n            <PostsList\n              currentUserId={currentUserId}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          </div>\n        )}\n\n        <div\n          className={classNames(\n            'App__content',\n            { 'App__content--empty': !selectedPostId },\n          )}\n        >\n          { selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          )}\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}