{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","index.tsx"],"names":["PostsList","postsList","selectedPostId","downLoadComments","downloadPostDetails","className","length","map","post","userId","id","title","type","onClick","NewCommentForm","name","placeholder","PostDetails","postComments","postDetails","counterComments","useState","showComments","setShowComments","comment","body","BASE_URL","getUserPosts","a","endPoint","console","log","fetch","response","ok","Error","headers","get","includes","Promise","reject","json","getPostDetails","postId","getPostComments","App","setPostsList","currentUser","setCurrentUser","setSelectedPostId","createdAt","updatedAt","setPostDetails","setPostComments","downloadPosts","posts","newPostDetails","comments","onChange","e","target","value","style","visibility","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ab46581.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  postsList: Post[];\n  selectedPostId: string;\n  downLoadComments: (id: string) => void;\n  downloadPostDetails: (postId: string) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  postsList,\n  selectedPostId,\n  downLoadComments,\n  downloadPostDetails,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <p>{`Count posts: ${postsList.length}`}</p>\n\n      <ul className=\"PostsList__list\">\n        {postsList.map((post: Post) => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n            data-cy=\"postDetails\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.id}\n              :\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                downLoadComments(post.id);\n                downloadPostDetails(post.id);\n              }}\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => (\n  <form className=\"NewCommentForm\">\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      className=\"NewCommentForm__submit-button button\"\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postComments: Comment[];\n  postDetails: Post;\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  postDetails,\n}) => {\n  // const postTitle = postDetails.title;\n  const counterComments = postComments.length;\n  const [showComments, setShowComments] = useState(true);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"PostDetails__button button\"\n          onClick={() => setShowComments(!showComments)}\n        >\n          { showComments\n            ? `Hide ${counterComments} comments`\n            : 'Show comments' }\n        </button>\n\n        { showComments && (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postList\"\n          >\n            {postComments.map((comment: Comment) => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getUserPosts(userId: string): Promise<never[]> {\n  const addUrl = '/posts?userId=';\n  const addUrlForAllUsers = '/posts';\n\n  const endPoint = `${BASE_URL}${\n    (userId === '0')\n      ? addUrlForAllUsers\n      : addUrl + userId\n  }`;\n\n  // eslint-disable-next-line no-console\n  console.log('userId:', userId, 'endPoint:', endPoint);\n\n  const response = await fetch(endPoint);\n\n  if (!response.ok) {\n    throw new Error('error');\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content type is not supported');\n  }\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: string): Promise<Post> {\n  const addUrl = '/posts/';\n  const endPoint = `${BASE_URL}${addUrl}${postId}`;\n\n  // eslint-disable-next-line no-console\n  console.log('postId:', postId, 'endPoint:', endPoint);\n\n  const response = await fetch(endPoint);\n\n  if (!response.ok) {\n    throw new Error('error');\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content type is not supported');\n  }\n\n  return response.json();\n}\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getPostComments(postId: string): Promise<never[]> {\n  const addUrl = '/comments?postId=';\n  const endPoint = `${BASE_URL}${addUrl}${postId}`;\n\n  // eslint-disable-next-line no-console\n  console.log('postId:', postId, 'endPoint:', endPoint);\n\n  const response = await fetch(endPoint);\n\n  if (!response.ok) {\n    throw new Error('error');\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content type is not supported');\n  }\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getPostDetails } from './api/posts';\nimport { getPostComments } from './api/comments';\n\nconst App: React.FC = () => {\n  const [postsList, setPostsList] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [postDetails, setPostDetails] = useState({\n    id: '',\n    userId: '',\n    title: '',\n    body: '',\n    createdAt: '',\n    updatedAt: '',\n  });\n  const [postComments, setPostComments] = useState([]);\n\n  const downloadPosts = async (userId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(userId);\n\n    if (currentUser !== userId) {\n      const posts = await getUserPosts(userId);\n\n      setCurrentUser(userId);\n      setPostsList(posts);\n    }\n  };\n\n  const downloadPostDetails = async (postId: string) => {\n    // eslint-disable-next-line no-console\n    console.log(postId);\n\n    const newPostDetails = await getPostDetails(postId);\n\n    setPostDetails(newPostDetails);\n  };\n\n  const downLoadComments = async (id: string) => {\n    if (selectedPostId === id) {\n      setSelectedPostId('');\n    } else {\n      const comments = await getPostComments(id);\n\n      setSelectedPostId(id);\n      setPostComments(comments);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={e => downloadPosts(e.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n\n        <p>{`selectedPostId: ${selectedPostId}`}</p>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={postsList}\n            selectedPostId={selectedPostId}\n            downloadPostDetails={downloadPostDetails}\n            downLoadComments={downLoadComments}\n          />\n        </div>\n\n        <div\n          className=\"App__content\"\n          style={{\n            visibility: `${!selectedPostId ? 'hidden' : 'visible'}`,\n          }}\n        >\n          <PostDetails\n            postComments={postComments}\n            postDetails={postDetails}\n          />\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}