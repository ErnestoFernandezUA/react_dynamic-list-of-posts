{"version":3,"sources":["api/request.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","console","log","fetch","response","ok","Promise","reject","status","statusText","headers","get","includes","json","getPostDetails","postId","Loader","className","PostsList","currentUser","selectedPostId","setSelectedPostId","setShowPostDetails","useState","postsList","setPostsList","showLoaderPostsList","setShowLoaderPostsList","loadData","userId","posts","useEffect","length","map","post","classNames","id","title","body","type","onClick","postsListHandle","createComment","newComment","data","method","JSON","stringify","deleteComment","commentId","NewCommentForm","initialNewComment","name","email","setNewComment","inputChangeHandler","event","target","value","onSubmit","preventDefault","then","placeholder","onChange","initialPostDetails","createdAt","updatedAt","PostDetails","postComments","setPostComments","postDetails","setPostDetails","showComments","setShowComments","showLoaderPostsDetails","setShowLoaderPostsDetails","counterComments","all","comments","newPostDetails","comment","formMethod","App","setCurrentUser","showPostDetails","defaultValue","e","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3809ee6f.chunk.js","sourcesContent":["/* eslint-disable no-cond-assign */\nexport const BASE_URL = 'https://mate.academy/students-api';\n\n// type OptionsRequest = {\n//   method: string;\n//   headers: { 'Content-type': string; };\n//   body: string;\n// };\n\n// const initialOptionsRequest = {\n//   method: 'GET',\n//   headers: { 'Content-type': '' },\n//   body: '',\n// };\n\nexport const request = async (\n  url: string,\n  options: any = {},\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}${url}`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  if (!response.headers.get('content-type')?.includes('application/json')) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject('Content-type is not supported');\n  }\n\n  return response.json();\n};\n","import { request } from './request';\n\nexport const getUserPosts = (userId: string) => request(\n  (userId === 'All') ? '/posts' : `/posts?userId=${userId}`,\n);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ntype Props = {\n  currentUser: string;\n  setSelectedPostId: (postId: string) => void;\n  selectedPostId: string;\n  setShowPostDetails: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  currentUser,\n  selectedPostId,\n  setSelectedPostId,\n  setShowPostDetails,\n}) => {\n  const [postsList, setPostsList] = useState([]);\n  const [showLoaderPostsList, setShowLoaderPostsList] = useState(false);\n\n  const loadData = async () => {\n    setShowLoaderPostsList(true);\n\n    try {\n      const posts = await getUserPosts(currentUser);\n\n      setPostsList(posts);\n      setShowLoaderPostsList(false);\n    } catch (error) {\n      setShowLoaderPostsList(false);\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    }\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('mounted', currentUser);\n\n    loadData();\n\n    // eslint-disable-next-line no-console\n    console.log('postsList = ', postsList);\n  },\n  [currentUser]);\n\n  const postsListHandle = (postId: string) => {\n    // eslint-disable-next-line no-console\n    console.log('postId =', postId);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId before = ', selectedPostId);\n\n    switch (true) {\n      case selectedPostId && postId === selectedPostId:\n        setSelectedPostId('');\n        setShowPostDetails(false);\n        // eslint-disable-next-line no-console\n        console.log('postId === selectedPostId', postId, selectedPostId);\n        break;\n\n      case selectedPostId && postId !== selectedPostId:\n        setSelectedPostId(postId);\n        setShowPostDetails(true);\n        // eslint-disable-next-line no-console\n        console.log('postId !== selectedPostId', postId, selectedPostId);\n        break;\n\n      default:\n        setSelectedPostId(postId);\n        setShowPostDetails(true);\n        // eslint-disable-next-line no-console\n        console.log('selectedPostId undefined =', postId, selectedPostId);\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId after =', selectedPostId);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {showLoaderPostsList ? (\n        <Loader />\n      ) : (\n        <>\n          <p>{`Count posts: ${postsList.length}`}</p>\n\n          <ul className=\"PostsList__list\">\n            {postsList.map((post: Post) => (\n              <li\n                key={post.id}\n                className={classNames('PostsList__item',\n                  { 'PostsList__item--active': (post.id === selectedPostId) })}\n                data-cy=\"postDetails\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  <strong>{post.title}</strong>\n                  :\n                  <br />\n                  {`${post.id} : ${post.body}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postsListHandle(post.id)}\n                >\n                  {(selectedPostId === post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  request,\n  // BASE_URL,\n} from './request';\n\nexport const getPostComments = (postId: string) => request(\n  `/comments?postId=${postId}`,\n);\n\nconst post = (url: string, data: NewComment) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n\n// const patch = (url: string, data: NewComment) => {\n//   return request(url, {\n//     method: 'PATCH',\n//     headers: {\n//       'Content-type': 'application/json; charset=utf-8',\n//     },\n//     body: JSON.stringify(data),\n//   });\n// };\n\n// const updateComment = (commentId: string, newComment: NewComment) => {\n//   return patch(`//`)\n// };\n\nexport const createComment = (newComment : NewComment) => {\n  return post('/comments', newComment);\n};\n\nconst remove = (url: string) => {\n  return request(url, { method: 'DELETE' });\n};\n\nexport const deleteComment = (commentId: string) => {\n  // eslint-disable-next-line no-console\n  console.log('commentId = ', commentId);\n\n  return remove(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: string;\n  loadData: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  loadData,\n}) => {\n  // eslint-disable-next-line no-console\n  console.log('render NewCommentForm', selectedPostId, typeof selectedPostId);\n\n  const initialNewComment = {\n    // eslint-disable-next-line quote-props\n    'postId': selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  // eslint-disable-next-line no-console\n  console.log('initialNewComment = ', initialNewComment);\n\n  const [newComment, setNewComment] = useState(initialNewComment);\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('useEffect initialNewComment', initialNewComment);\n\n    setNewComment(initialNewComment);\n  },\n  [selectedPostId]);\n\n  const inputChangeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    // eslint-disable-next-line no-console\n    console.log(selectedPostId, 'newComment handler before', newComment,\n      event.target.name, ' = ', event.target.value);\n\n    setNewComment({\n      ...newComment,\n      [event.target.name]: event.target.value,\n    });\n\n    // eslint-disable-next-line no-console\n    console.log('newComment handler after', newComment);\n  };\n\n  const newCommentFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // eslint-disable-next-line no-console\n    console.log('new comment submit', newComment);\n\n    // eslint-disable-next-line no-console\n    createComment(newComment).then(() => loadData());\n    setNewComment(initialNewComment);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      method=\"POST\"\n      onSubmit={newCommentFormSubmit}\n    >\n      {selectedPostId}\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input NewCommentForm__input--textarea\"\n          value={newComment.body}\n          onChange={inputChangeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: string,\n};\n\n// can't import from react-app-env.ts\ntype Comment = {\n  id: string;\n  postId: string;\n  createdAt: string;\n  updatedAt: string;\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst initialPostDetails = {\n  id: '',\n  userId: '',\n  title: '',\n  body: '',\n  createdAt: '',\n  updatedAt: '',\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  // eslint-disable-next-line no-console\n  console.log('render PostDetails');\n\n  const [postComments, setPostComments] = useState([]);\n  const [postDetails, setPostDetails] = useState(initialPostDetails);\n  const [showComments, setShowComments] = useState(true);\n  const [showLoaderPostsDetails, setShowLoaderPostsDetails] = useState(false);\n\n  const counterComments = postComments.length;\n\n  const loadData = async () => {\n    setShowLoaderPostsDetails(true);\n\n    // eslint-disable-next-line no-console\n    console.log('selectedPostId =', selectedPostId);\n\n    try {\n      const [comments, newPostDetails] = await Promise.all([\n        getPostComments(selectedPostId),\n        getPostDetails(selectedPostId),\n      ]);\n\n      setPostComments(comments);\n      setPostDetails(newPostDetails);\n      setShowLoaderPostsDetails(false);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n\n      setShowLoaderPostsDetails(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedPostId) {\n      // eslint-disable-next-line no-console\n      console.log('mounted new comment by postId = ', selectedPostId);\n\n      loadData();\n    }\n  },\n  [\n    selectedPostId,\n  ]);\n\n  const onDeleteButton = (commentId: string) => {\n    deleteComment(commentId).then((response) => {\n      // eslint-disable-next-line no-console\n      console.log(response, 'loadData');\n\n      loadData();\n    });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {showLoaderPostsDetails ? (\n        <Loader />\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{`${selectedPostId} : ${postDetails.title} : ${postDetails.id}`}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__button button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              { showComments\n                ? `Hide ${counterComments} comments`\n                : 'Show comments' }\n            </button>\n\n            { showComments && (\n              <ul\n                className=\"PostDetails__list\"\n                data-cy=\"postList\"\n              >\n                {postComments.map((comment: Comment) => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      formMethod=\"DELETE\"\n                      onClick={() => onDeleteButton(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.id}\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        </>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            loadData={loadData}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState('');\n  const [showPostDetails, setShowPostDetails] = useState(false);\n\n  const selectUserHandler = (userId: string) => {\n    setCurrentUser(userId);\n    setShowPostDetails(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            defaultValue=\"DEFAULT\"\n            onChange={e => selectUserHandler(e.target.value)}\n          >\n            <option value=\"DEFAULT\" disabled>Choose...</option>\n            <option value=\"All\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        {currentUser && (\n          <div className=\"App__sidebar\">\n            <PostsList\n              currentUser={currentUser}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n              setShowPostDetails={setShowPostDetails}\n            />\n          </div>\n        )}\n\n        <div\n          className={classNames(\n            'App__content',\n            { 'App__content--hidden': !showPostDetails },\n          )}\n        >\n          { selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}